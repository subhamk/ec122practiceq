col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the missing z-score value identified by '*[1]' in the table?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", r), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
df
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, round(cen.x,2), round(z.x,2))
df1 <- df
r <- df[1,3]
r1 <- df[2,3]
df1[1,3] <- "*[1]"
df1[2,3] <- "*[2]"
x1 <- r - 0.5
x2 <- r + 0.5
x3 <- r * 1.2
x11 <- r1 - 0.5
x21 <- r1 + 0.3
x31 <- r1 * 0.8
knitr::kable(df1,
col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
df
question("What is the missing z-score value identified by '*[1]' in the table?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", r), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
question("What is the missing z-score value identified by '*[2]' in the table?",
answer(sprintf("%s", x11)),
answer(sprintf("%s", r1), correct = TRUE),
answer(sprintf("%s", x22)),
answer(sprintf("%s", x33)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
question("What is the missing z-score value identified by '*[2]' in the table?",
answer(sprintf("%s", x11)),
answer(sprintf("%s", r1), correct = TRUE),
answer(sprintf("%s", x21)),
answer(sprintf("%s", x31)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
sum.wt
wt.sum <- sum(x * wt)
wt.avg <- wt.sum/sum.wt
wt.avg
mean(x)
wt
wt.avg <- round(wt.sum/sum.wt,2)
wt.avg
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$))", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$)", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the weighted average of share prices in the portfolio?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", wt.avg), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Compute the weighted sum $\\sum w_i p_i$. Divide this by sum of weights $\\sum w_i$."
)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$)", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the weighted average returns of the portfolio?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", wt.avg), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Compute the weighted sum $\\sum w_i p_i$. Divide this by sum of weights $\\sum w_i$."
)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# we create a variable mpg with the relevant data
mpg <- mtcars$mpg
mpg
typeof(mpg)
var(mpg)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# for installation
# install.packages("devtools")
# library("devtools")
install.packages("remotes")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("rstudio/gradethis")
library("learnr")
library("gradethis")
remotes::install_github("rstudio/gradethis")
library("learnr")
library("gradethis")
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson1", package = "ec122practiceq", open = interactive())
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson2", package = "ec122practiceq")
library(ec122practiceq)
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson2", package = "ec122practiceq")
learnr:::ACE_THEMES
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB
pAorB
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pAnotB <- pA - pAB; pAnotB
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pAnotB <- pA - pAB; pAnotB
# lesson2a
usethis::use_tutorial("lesson2a", "Probability distributions")
pA <- 0.5
pB <- 0.3
pnotA <- 1-pA; pnotA
pAorB <- pA + pB; pAorB
1 - pAorB
pA <- 0.5
pB <- 0.4
pnotA <- 1-pA; pnotA
pAorB <- pA + pB; pAorB
1 - pAorB
install.packages("gtools")
5/36
round(5/36, 2)
round(.05, 2)
round(.06, 2)
round(.135, 2)
round(.134, 2)
fraction(.14)
library(MASS)
fraction(.14)
fractions(.14)
5/36
fractions(.1388)
factorial(6)/factorial(6-3)
6*5*4
library("learnr")
library("gradethis")
library("gtools")
tutorial_options(exercise.checker = gradethis::grade_learnr)
knitr::opts_chunk$set(echo = FALSE)
choose(5,2)
# prob (red and green)
p.RG <- (10*6)/choose(20,2); a
# prob green and yellow
p.GY <- (6*4)/choose(20,2)
# prob red and yellow
p.RY <- (10*4)/choose(20,2)
# prob exactly one red or exactly one yellow
prob <- p.RG + p.GY + p.RY; prob
# prob (red and green)
p.RG <- (10*6)/choose(20,2); a
# prob green and yellow
p.GY <- (6*4)/choose(20,2)
# prob red and yellow
p.RY <- (10*4)/choose(20,2)
# prob exactly one red or exactly one yellow
prob <- p.RG + p.GY + p.RY; round(prob,2)
# prob (red and green)
p.RG <- (10*6)/choose(20,2); p.RG
# prob green and yellow
p.GY <- (6*4)/choose(20,2); p.GY
# prob red and yellow
p.RY <- (10*4)/choose(20,2); p.RY
# prob exactly one red or exactly one yellow
prob <- p.RG + p.GY + p.RY; round(prob,2)
fractions(p.RG)
36*6
120/216
120/216
round(120/216,2)
rm(list = ls())
k <- 10
p <- numeric(k)
for (i in 1:k){
q <- (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
rm(list = ls())
k <- 5
p <- numeric(k)
for (i in 1:k){
q <- (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
q
factorial(10)/factorial(4)
factorial(10)/factorial(6)
factorial(365)/factorial(365-10)
1/365
rm(list = ls())
k <- 500
p <- numeric(k)
for (i in 1:k){
q <- (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
rm(list = ls())
k <- 20
p <- numeric(k)
for (i in 1:k){
q <- 1 - (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
rm(list = ls())
k <- 25
p <- numeric(k)
for (i in 1:k){
q <- 1 - (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
24*5
factorial(365)/factorial(355)
(factorial(365)/factorial(355))/365^10
rm(list = ls())
k <- 25
p <- numeric(k)
for (i in 1:k){
q <- 1 - (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
plot(1:25, p)
rm(list = ls())
k <- 50
p <- numeric(k)
for (i in 1:k){
q <- 1 - (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
plot(1:k, p)
choose(365,10)*factorial(10)
choose(365,5)*factorial(5)
(choose(365,10)*factorial(10))/365^10
rm(list = ls())
k <- 10
p <- numeric(k)
for (i in 1:k){
q <- 1 - (0:(i-1))/365
p[i] <- prod(q)
}
prob <- p[k]
prob
plot(1:k, p)
round((choose(365,10)*factorial(10))/365^10,2)
grade_result(
pass_if(~identical(.result, round((choose(365,10)*factorial(10))/365^10, 2)))
)
# prob high speed processor
pA <- 0.75
# prob fingerprint reader
pB <- 0.80
# prob both
pAB <- 0.65
# prob A or B
pAorB <- pA + pB - pAB; pAorB
# prob high speed processor
pA <- 0.75
# prob fingerprint reader
pB <- 0.80
# prob both
pAB <- 0.65
# prob A or B
pAorB <- pA + pB - pAB; pAorB
pAgB <- pAB/pB; pAgB
bBgA <- pAB/pA
# prob high speed processor
pA <- 0.75
# prob fingerprint reader
pB <- 0.80
# prob both
pAB <- 0.65
# prob A or B
pAorB <- pA + pB - pAB; pAorB
pAgB <- pAB/pB; pAgB
bBgA <- pAB/pA; pBgA
# prob high speed processor
pA <- 0.75
# prob fingerprint reader
pB <- 0.80
# prob both
pAB <- 0.65
# prob A or B
pAorB <- pA + pB - pAB; pAorB
pAgB <- pAB/pB; pAgB
pBgA <- pAB/pA; pBgA
round(pAgB)
round(pAgB,2)
round(pBgA,2)
pD <- 0.001 # pr. has the disease
pnD <- 1-pD # pr. no disease
pTgD <- 0.98  # test sensitivity
pTgnD <- 0.01 # false positive rate
# pr. has the disease given tests positive
pDgT <- (pTgD*pD)/(pTgD*pD + pTgnD*pnD); pDgT
pD <- 0.001 # pr. has the disease
pnD <- 1-pD # pr. no disease
pTgD <- 0.98  # test sensitivity
pTgnD <- 0.01 # false positive rate
# pr. has the disease given tests positive
pDgT <- (pTgD*pD)/(pTgD*pD + pTgnD*pnD); round(pDgT,2)
pD <- 0.001 # pr. has the disease
pnD <- 1-pD # pr. no disease
pTgD <- 0.98  # test sensitivity
pTgnD <- 0.01 # false positive rate
# pr. has the disease given tests positive
pDgT <- (pTgD*pD)/(pTgD*pD + pTgnD*pnD); round(pDgT,3)
1/1000
(0.2*0.85)/(0.2*0.85 + 0.8*0.15)
pBlue <- 0.15
pGreen <- 0.85
# C = claim that the perpetrator is a Blue taxi
pCgBlue <- 0.80    # correct id
pCgGreen <- 0.20   # incorrect id (false positive)
# prob that a green taxi was the perpetrator
prob <- (pCgGreen*pGreen)/(pCgGreen*pGreen + pCgBlue*pBlue); round(prob, 2)
pBlue <- 0.15
pGreen <- 0.85
# C = claim that the perpetrator is a Blue taxi
pCgBlue <- 0.80    # correct id
pCgGreen <- 0.20   # incorrect id (false positive)
# prob that a green taxi was the perpetrator
prob <- (pCgGreen*pGreen)/(pCgGreen*pGreen + pCgBlue*pBlue); round(prob, 3)
library(ec122practiceq)
library(ec122practiceq)
library("ec122practiceq")
