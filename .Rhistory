install.packages("rmarkdown")
install.packages("pander")
if(!require(installr)) { install.packages("installr"); require(installr)}
install.pandoc()
Yes
pandoc_version()
pandoc_version()
devtools::install_github('rstudio/rmarkdown')
install.packages('devtools')
devtools::install_github('rstudio/rmarkdown')
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages(c("callr", "digest", "dplyr", "jsonlite", "mime", "processx", "ps", "rlang", "rstudioapi", "stringi", "tidyselect"))
install.packages("jsonlite")
install.packages(c("dplyr", "stringi", "tidyselect"))
pandoc_exec()
install.packages("dynlm")
install.packages(c("backports", "broom", "callr", "cli", "clipr", "covr", "crosstalk", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "forcats", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "janitor", "jsonlite", "knitr", "later", "lifecycle", "lubridate", "mime", "modelr", "openssl", "pillar", "pkgbuild", "pkgload", "plyr", "processx", "promises", "ps", "purrr", "Rcpp", "readr", "remotes", "reshape2", "rex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "scales", "shiny", "sp", "stringi", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2"))
install.packages("tidyverse")
install.packages("rgdal")
install.packages("sf", dep = T)
install.packages("rmarkdown", DEp = T)
install.packages("rmarkdown", Dep = T)
library(rmarkdown)
library(sf)
library(raster)
1635.875/7
?sort.int
(31+35)/2
x.median
choose(10,1)
1-0.02
.98^10
?hist
set.seed(5431)
rand.unif <- runif(500, min = 11, max = 17)
hist(rand.unif, freq = FALSE, xlab = 'x', density = 20)
set.seed(5431)
a <- 11
b <- 17
rand.unif <- runif(500, min = a, max = b)
hist(rand.unif, freq = FALSE, xlab = 'x', density = 20)
curve(dunif(x, min = a, max = b),
from = 8, to = 20,
n = 500,
col = "darkblue",
lwd = 2,
add = TRUE,
yaxt = "n",
ylab = 'probability')
set.seed(5431)
a <- 11
b <- 17
rand.unif <- runif(500, min = a, max = b)
hist(rand.unif,
freq = FALSE,
xlab = 'x',
xlim = c(8,20),
density = 20)
curve(dunif(x, min = a, max = b),
from = 8, to = 20,
n = 500,
col = "darkblue",
lwd = 2,
add = TRUE,
yaxt = "n",
ylab = 'probability')
set.seed(5431)
a <- 11
b <- 17
rand.unif <- runif(500, min = a, max = b)
hist(rand.unif,
freq = FALSE,
xlab = 'x',
xlim = c(8,20),
main = "Uniform distribution for the interval [11,17]")
curve(dunif(x, min = a, max = b),
from = 8, to = 20,
n = 500,
col = "darkblue",
lwd = 2,
add = TRUE,
yaxt = "n",
ylab = 'probability')
devtools::install_github("Hemken/Statamarkdown")
install.packages("devtools")
library("devtools")
devtools::install_github("Hemken/Statamarkdown")
.libPaths()
Sys.which("make")
?devtools
library("devtools")
?devtools
devtools::install_github("Hemken/Statamarkdown")
library("Statamarkdown")
devtools::install_github("Hemken/Statamarkdown", force = T)
library("Statamarkdown")
?Statamarkdown
devtools::install_github("Hemken/Statamarkdown", force = T)
remove.packages("Statarmarkdown")
devtools::install_github("Hemken/Statamarkdown", force = T)
library(Statamarkdown)
.rs.restartR()
library(Statamarkdown)
remove.packages(Statamarkdown)
remove.packages("Statamarkdown")
library("Statamarkdown")
devtools::install_github("Hemken/Statamarkdown")
devtools::install_github("Hemken/Statamarkdown")
library(Statamarkdown)
install.packages("astsa")
install.packages("xts")
knitr::opts_chunk$set(echo = TRUE)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.5, 0.4, 0.6)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.2, 0.4, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.4, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.4, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.1)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.4, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.5, 0.4, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.5, 0.3, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.5, 0.3, 0.2)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.3)),  n = 200)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.2, 0.3)),  n = 200)
acf(y)
pacf(y)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.2, 0.2, 0.2)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.2, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.2, 0.3, 0.3)),  n = 200)
acf(y)
pacf(y)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.2, 0.2, 0.2)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.2, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
acf(y)
acf1(y)
acf2(y)
library('astsa')
acf1(y)
df <- data.frame(ac, pac)[1:5]
ac <- acf1(y)
pac<- pacf(y)
df <- data.frame(ac, pac)[1:5]
df <- data.frame(ac, pac)
ac
attr(ac)
typeof(ac)
ac <- as.list(acf1(y))
pac<- as.list(pacf(y))
df <- data.frame(ac, pac)
df <- as.data.frame(ac, pac)
?acf1
ac <- as.list(acf1(y), 6)
pac<- as.list(pacf(y), 6)
ac
ac <- acf1(y, 6)
ac <- acf1(y, 8)
pac<- pacf(y, 6)
ac
df <- as.data.frame(ac, pac)
ac
ac[1]
ac[2]
acf(y, 5)
ac <- acf1(y, 8)
ac <- acf1(y, 8)
pac<- pacf(y, 6)
ac <- acf1(y, 8)
pac<- pacf1(y, 6)
pac<- pacf1(y, 6)
ac <- acf(y, 8)
pac <- pacf(y, 8)
df <- as.data.frame(ac, pac)
ac
ac <- data.frame(acf(y, 8))
ac <- acf(y, 8)
pac <- pacf(y, 8)
ac <- acf(y, 8)
library(Statamarkdown)
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path = list(stata = stataexe))
# knitr::opts_chunk$set(echo = FALSE,
#                       engine.path = list(stata = stataexe))
install.packages("bookdown")
library(bookdown)
install.packages("tidyverse")
rmarkdown::pandoc_version()
tinytex::install_tinytex()
install.packages("bslib")
install.packages("shiny")
getwd()
setwd("C:/Users/u1874478/Documents/stats-practice-quizzes/")
# check and install required packages
pkg.list <- c("devtools", "usethis", "roxygen2", "learnr")
pkg.new <- pkg.list[!(pkg.list %in% installed.packages()[,"Package"])]
if(length(pkg.new)) install.packages(pkg.new)
setwd("C:/Users/u1874478/Documents/ec122practiceq/")
# check and install required packages
pkg.list <- c("devtools", "usethis", "roxygen2", "learnr")
pkg.new <- pkg.list[!(pkg.list %in% installed.packages()[,"Package"])]
if(length(pkg.new)) install.packages(pkg.new)
# load packages
lapply(pkg.list, require, character.only = TRUE)
here::here()
usethis::create_package(here::here())
# add files and directories for practiceq
usethis::use_tutorial("lesson1", "Introduction and Descriptive Statistics", open = interactive())
# Build, isntall and use package
devtools::install()
