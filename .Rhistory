acf(y)
pacf(y)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.2, 0.2, 0.2)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.2, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.3, 0.3, 0.3)),  n = 200)
acf(y)
y <- arima.sim(list(order = c(3, 0, 0), ar = c(0.4, 0.3, 0.2)),  n = 200)
acf(y)
pacf(y)
acf(y)
acf1(y)
acf2(y)
library('astsa')
acf1(y)
df <- data.frame(ac, pac)[1:5]
ac <- acf1(y)
pac<- pacf(y)
df <- data.frame(ac, pac)[1:5]
df <- data.frame(ac, pac)
ac
attr(ac)
typeof(ac)
ac <- as.list(acf1(y))
pac<- as.list(pacf(y))
df <- data.frame(ac, pac)
df <- as.data.frame(ac, pac)
?acf1
ac <- as.list(acf1(y), 6)
pac<- as.list(pacf(y), 6)
ac
ac <- acf1(y, 6)
ac <- acf1(y, 8)
pac<- pacf(y, 6)
ac
df <- as.data.frame(ac, pac)
ac
ac[1]
ac[2]
acf(y, 5)
ac <- acf1(y, 8)
ac <- acf1(y, 8)
pac<- pacf(y, 6)
ac <- acf1(y, 8)
pac<- pacf1(y, 6)
pac<- pacf1(y, 6)
ac <- acf(y, 8)
pac <- pacf(y, 8)
df <- as.data.frame(ac, pac)
ac
ac <- data.frame(acf(y, 8))
ac <- acf(y, 8)
pac <- pacf(y, 8)
ac <- acf(y, 8)
library(Statamarkdown)
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path = list(stata = stataexe))
# knitr::opts_chunk$set(echo = FALSE,
#                       engine.path = list(stata = stataexe))
install.packages("bookdown")
library(bookdown)
install.packages("tidyverse")
rmarkdown::pandoc_version()
tinytex::install_tinytex()
install.packages("bslib")
install.packages("shiny")
getwd()
setwd("C:/Users/u1874478/Documents/stats-practice-quizzes/")
# check and install required packages
pkg.list <- c("devtools", "usethis", "roxygen2", "learnr")
pkg.new <- pkg.list[!(pkg.list %in% installed.packages()[,"Package"])]
if(length(pkg.new)) install.packages(pkg.new)
setwd("C:/Users/u1874478/Documents/ec122practiceq/")
# check and install required packages
pkg.list <- c("devtools", "usethis", "roxygen2", "learnr")
pkg.new <- pkg.list[!(pkg.list %in% installed.packages()[,"Package"])]
if(length(pkg.new)) install.packages(pkg.new)
# load packages
lapply(pkg.list, require, character.only = TRUE)
here::here()
usethis::create_package(here::here())
# add files and directories for practiceq
usethis::use_tutorial("lesson1", "Introduction and Descriptive Statistics", open = interactive())
# Build, isntall and use package
devtools::install()
library(ec122practiceq)
# run lesson0
learnr::run_tutorial("lesson0", package = "ec122practiceq")
library(ec122practiceq)
# run lesson0
learnr::run_tutorial("lesson0", package = "ec122practiceq")
library(ec122practiceq)
library(ec122practiceq)
install.packages("mnormt")
x <- seq(-5, 5, 0.25)
y <- seq(-5, 5, 0.25)
mu <- c(0,0)
sigma <- matrix(c(2,-1,-1, 2), nrow = 2)
sigma
f <- function(x,y) dnorm(cbind(x,y), mu, sigma)
z <- outer(x, y, f) # apply the functuin f to x and y repeatedly
f <- function(x,y) dnorm(cbind(x,y), mu, sigma)
z <- outer(x, y, f) # apply the functuin f to x and y repeatedly
x <- seq(-5, 5, 0.25)
y <- seq(-5, 5, 0.25)
mu <- c(0,0)
sigma <- matrix(c(2,-1,-1, 2), nrow = 2)
f <- function(x,y) dnorm(cbind(x,y), mu, sigma)
z <- outer(x, y, f) # apply the function f to x and y repeatedly
library("mnormt")
f <- function(x,y) dmnorm(cbind(x,y), mu, sigma)
z <- outer(x, y, f) # apply the function f to x and y repeatedly
contour(x, y, z)
persp(x, y, z, theta = -30, phi = 25,
shade = 0.75, col = "gold", expand = 0.5, r = 2,
ltheta = 25, ticktype = "detailed")
?persp
plot(f)
plot(f, axes = c(TRUE, TRUE))
rm(list = ls())
getwd()
library("learnr")
library("tidyverse")
library("kableExtra")
library("MASS")
library("pander")
knitr::opts_chunk$set(echo = FALSE)
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, cen.x, z.x)
df
r <- df[1,3]
df[1,3] <- "*[1]"
df
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, cen.x, z.x)
r <- df[1,3]
df[1,3] <- "*[1]"
r1 <- df[2,3]
df[2,3] <- "*[2]"
x1 <- r - 0.5
x2 <- r + 0.5
x3 <- r * 1.2
x11 <- r1 - 0.5
x21 <- r1 + 0.3
x31 <- r1 * 0.8
knitr::kable(df,
col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
df <- data.frame(x, round(cen.x,2), round(z.x,2))
df
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, round(cen.x,2), round(z.x,2))
r <- df[1,3]
df[1,3] <- "*[1]"
r1 <- df[2,3]
df[2,3] <- "*[2]"
x1 <- r - 0.5
x2 <- r + 0.5
x3 <- r * 1.2
x11 <- r1 - 0.5
x21 <- r1 + 0.3
x31 <- r1 * 0.8
knitr::kable(df,
col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, round(cen.x,2), round(z.x,2))
r <- df[1,3]
r1 <- df[2,3]
df[1,3] <- "*[1]"
df[2,3] <- "*[2]"
x1 <- r - 0.5
x2 <- r + 0.5
x3 <- r * 1.2
x11 <- r1 - 0.5
x21 <- r1 + 0.3
x31 <- r1 * 0.8
knitr::kable(df,
col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the missing z-score value identified by '*[1]' in the table?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", r), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
df
set.seed(10)
n <-5
x <- sample(5:50, n)
cen.x <- x - mean(x)
z.x <- cen.x/sd(x)
df <- data.frame(x, round(cen.x,2), round(z.x,2))
df1 <- df
r <- df[1,3]
r1 <- df[2,3]
df1[1,3] <- "*[1]"
df1[2,3] <- "*[2]"
x1 <- r - 0.5
x2 <- r + 0.5
x3 <- r * 1.2
x11 <- r1 - 0.5
x21 <- r1 + 0.3
x31 <- r1 * 0.8
knitr::kable(df1,
col.names = c("X", "Centered", "z score"),
caption = "Standardized values",
align = "ccc",
digits = c(0,2,2)) %>%
kableExtra::kable_styling(full_width = FALSE)
df
question("What is the missing z-score value identified by '*[1]' in the table?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", r), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
question("What is the missing z-score value identified by '*[2]' in the table?",
answer(sprintf("%s", x11)),
answer(sprintf("%s", r1), correct = TRUE),
answer(sprintf("%s", x22)),
answer(sprintf("%s", x33)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
question("What is the missing z-score value identified by '*[2]' in the table?",
answer(sprintf("%s", x11)),
answer(sprintf("%s", r1), correct = TRUE),
answer(sprintf("%s", x21)),
answer(sprintf("%s", x31)),
random_answer_order = TRUE,
incorrect = "Hint: Let the missing frequency be $x$. Compute z-score as $\\frac{x - \\bar{x}}{s_x}$ where $\\bar{x}$ is the sample mean and $s_x$ is the sample standard deviation."
)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
sum.wt
wt.sum <- sum(x * wt)
wt.avg <- wt.sum/sum.wt
wt.avg
mean(x)
wt
wt.avg <- round(wt.sum/sum.wt,2)
wt.avg
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$))", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$)", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the weighted average of share prices in the portfolio?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", wt.avg), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Compute the weighted sum $\\sum w_i p_i$. Divide this by sum of weights $\\sum w_i$."
)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(100:200, n)  # share price
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.5
x2 <- wt.avg * 1.5
x3 <- wt.sum
knitr::kable(df,
col.names = c("Price per share ($p_i$)", "Number of shares($w_i$)"),
caption = "Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
set.seed(10)
n <- 3
x <- sample(-5:10, n)    # returns per share
wt <- sample(20:50, n)   # number of shares
df <- data.frame(x, wt)
sum.wt <- sum(wt)
wt.sum <- sum(x * wt)
wt.avg <- round(wt.sum/sum.wt,2)
mean(x)
# fuzz
x1 <- wt.avg * 0.6
x2 <- wt.avg * 1.2
x3 <- wt.sum
knitr::kable(df,
col.names = c("Returns per share ($r_i$%)", "Number of shares($w_i$)"),
caption = "Return on Stock Portfolio",
align = "cc",
digits = c(0,0)) %>%
kableExtra::kable_styling(full_width = FALSE)
question("What is the weighted average returns of the portfolio?",
answer(sprintf("%s", x1)),
answer(sprintf("%s", wt.avg), correct = TRUE),
answer(sprintf("%s", x2)),
answer(sprintf("%s", x3)),
random_answer_order = TRUE,
incorrect = "Hint: Compute the weighted sum $\\sum w_i p_i$. Divide this by sum of weights $\\sum w_i$."
)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# we create a variable mpg with the relevant data
mpg <- mtcars$mpg
mpg
typeof(mpg)
var(mpg)
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
library(ec122practiceq)
# run lesson1: Introduction and Descriptive Statistics
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# for installation
# install.packages("devtools")
# library("devtools")
install.packages("remotes")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("rstudio/gradethis")
library("learnr")
library("gradethis")
remotes::install_github("rstudio/gradethis")
library("learnr")
library("gradethis")
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson1", package = "ec122practiceq", open = interactive())
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson1", package = "ec122practiceq")
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson2", package = "ec122practiceq")
library(ec122practiceq)
# run lesson2: probability and probability distribution
learnr::run_tutorial("lesson2", package = "ec122practiceq")
learnr:::ACE_THEMES
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB
pAorB
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pA <- 0.5
pB <- 0.4
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pAnotB <- pA - pAB; pAnotB
pA <- 0.3
pB <- 0.6
pAB <- 0.25
pAorB <- pA + pB - pAB; pAorB
notpAorB <- 1 - pAorB; notpAorB
pAnotB <- pA - pAB; pAnotB
# lesson2a
usethis::use_tutorial("lesson2a", "Probability distributions")
pA <- 0.5
pB <- 0.3
pnotA <- 1-pA; pnotA
pAorB <- pA + pB; pAorB
1 - pAorB
pA <- 0.5
pB <- 0.4
pnotA <- 1-pA; pnotA
pAorB <- pA + pB; pAorB
1 - pAorB
